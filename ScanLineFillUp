#include <stdio.h>
#include <stdlib.h>
#include <GL/glut.h>

GLsizei winWidth = 600, winHeight = 600;

GLfloat xwcMin = 0.0, xwcMax = 500.0;
GLfloat ywcMin = 0.0, ywcMax = 500.0;

struct Point{/*定义“点”*/
	GLint x, y;
};
struct Line{/*定义“直线”*/
	Point start, end;
};
class  Poly{
public:
	Line* pline;
	GLint lnum;/*表明这个多边形有n条边*/
	 Poly(Point *pp,GLint pnum) {/*用给定的点，生成相应的凸包，假定点已经是“良序”的*//*------“良序”需要定义-------*/
		 pline = new Line[pnum];//生成的边的数量等于点的数量;
		 lnum = pnum;
		 for (GLint i = 0; i < pnum; ++i) {
			 /*规定pline中的线段的起点y坐标一定不小于终点的y坐标*/
			 /*如果该线段的终点不是极值点的话，就把终点的y坐标-1*/
			 /*水平线需要额外考虑*/ /*--------先假设不存在水平线--------*/
			 GLint minus = 0;
			 if ((pp[(i + 1) % pnum].y - pp[i].y)*(pp[(i + 1) % pnum].y - pp[(i + 2) % pnum].y) < 0)minus = 1;
			 if (pp[i].y < pp[(i + 1)%pnum].y) {
				 pline[i].start.x = pp[i].x;
				 pline[i].start.y = pp[i].y;
				 pline[i].end.x = pp[(i + 1)%pnum].x;
				 pline[i].end.y = pp[(i + 1)%pnum].y-minus;
			 }
			 else {
				 pline[i].start.x = pp[(i + 1) % pnum].x;
				 pline[i].start.y = pp[(i + 1) % pnum].y;
				 pline[i].end.x = pp[i].x;
				 pline[i].end.y = pp[i].y-minus;
			 }
		 }
	 }

	 /*把pline中的线段按照起点的y由小到大排序*/
	 void order() {
		/*采用顺序排序， 因为线段数量不是很多*/
		 for (GLint i = 0; i < lnum; ++i) {
			 GLint min = pline[i].start.y;
			 GLint index = i;
			 for (GLint j = i+1; j < lnum; ++j) {
				 if (pline[j].start.y < min) {
					 min = pline[j].start.y;
					 index = j;
				 }
			 }
			 if (index != i) {
				 Line temp = pline[i];
				 pline[i] = pline[index];
				 pline[index] = temp;
			 }
		 }
	 }
	~ Poly() {
		delete pline;
	};
};
class Edge {
public:
	GLint x, ymax, DelatX, DeltaY;
	Edge* nextedge;

	/*在已有的边之后再加上一条边*/
	void add(Edge* temp) {
		Edge* tedge = this;
		/*如果这条边的nextedge为控指针，则加在这条后面，否则，检查nextedge对应的edge*/
		while (tedge->nextedge != nullptr) {
			tedge = tedge->nextedge;
		}
		tedge->nextedge = temp;
		temp->nextedge = nullptr;	
	}
};
class  EdgeV 
{
public:
	Edge* head;
	GLint num;
	void add(Edge* temp) {
		head->add(temp);
		num++;
	}
};//在主函数里声明EdgeV EV[lnum];
class  PinSL//point in the search line
{
public:
	GLint x;
	GLint count;//计数器，用来决定是否增加x
	GLint lefttimes;//该点的生存剩余扫描线条数。由这点所在的原线段的ymax值和当前的y值决定。如果lefttimes = 0，则下一条扫描线就抛弃这个点
	GLint deltaX, deltaY;

	void add_x(GLint add_y) {
		count += add_y*deltaX;
		while (count >= deltaY) {
			x++;
			count -= deltaY;
		}
	}
	
	void setPinSL(GLint xx,GLint cc,GLint lltimes, GLint dx, GLint dy) {
		x = xx;
		count = cc;
		lefttimes = lltimes;
		deltaX = dx;
		deltaY = dy;
	}
};
class  PinSLV//point in the search line vector
{
public:
	PinSL* p;
	GLint num;//初始值为0
	GLint y;//记录当前扫描线的y坐标，相对的还是绝对的，还需再讨论,必须要和edge中的y坐标统一起来
	PinSLV() {}
	
	void setPinSLV(EdgeV* nowEdge, GLint yy) {
		y = yy;
		GLint n = nowEdge->num;
		p = new PinSL[n];//这种定义存在很大的浪费
		Edge *tedge = nowEdge->head;
		GLint i = 0;
		/*把当前扫描线边表中的边的交点加入到这条扫描线的交点上*/
		while (tedge != nullptr) {
			p[i++].setPinSL(tedge->x, 0, tedge->ymax - y, tedge->DelatX, tedge->DeltaY);
			num++;
		}
	}
	void setPinSLV(PinSL *pp, GLint pnum,GLint yy) {
		y = yy;
		num = pnum;
		p = new PinSL[num];
		for (GLint i = 0; i < pnum; ++i) {
			p[i].setPinSL(pp[i].x, 0, 0, pp[i].deltaX, pp[i].deltaY);
		}
	}
	void setPinSLV(PinSLV *beforeP, EdgeV *nowEdge,GLint yy)//给出前一条扫描线上的各个点，和当前扫描线的边表，计算当前扫描线上的表
	{
		y = yy;
		GLint n = beforeP->num+nowEdge->num;
		p = new PinSL[n];//这种定义存在很大的浪费
		Edge *tedge = nowEdge->head;
		GLint i = 0;
		/*把当前扫描线边表中的边的交点加入到这条扫描线的交点上*/
		while (tedge != nullptr) {
			p[i++].setPinSL(tedge->x, 0, tedge->ymax - y, tedge->DelatX, tedge->DeltaY);
			num++;
		}
		/*把前一条扫描线上的各个点加入到这条扫描线上*/
		for (GLint j = 0; j < beforeP->num; ++j) {
			if (beforeP->p[j].lefttimes > 0) {
				PinSL ptemp = beforeP->p[j];
				p[i++].setPinSL(ptemp.x, ptemp.count, ptemp.lefttimes - 1, ptemp.deltaX, ptemp.deltaY);
				num++;
			}
		}
	}
	~PinSLV()
	{
		delete p;
	}
	void  PlotScanLine(void) {
		GLint* x = new int[num];//把扫描线上的交点的横坐标取出来，并按由小到大排好
		for (GLint i = 0; i < num; ++i) {
			x[i] = p[i].x;
		}
		/*排序*/
		for (GLint i = 0; i < num; ++i) {
			GLint mini = x[i];
			GLint index = i;
			for (GLint j = 1; j < num; ++j) {
				if (x[j] < mini) {
					mini = x[j];
					index = j;
				}
			}
			if (index > i) {
				x[index] = x[i];
				x[i] = mini;
			}
		}
		/*取一对x，进行画线*/
		for (GLint i = 0; i < num ; i += 2) {
			glBegin(GL_LINES);
			glVertex2i(x[i], y);
			glVertex2i(x[i+1], y);
			glEnd();
		}
	}
};//在主函数里声明PinSLV PV[lnum];


void init(void) {
	/*Set color of display window to white */
	glClearColor(1.0, 1.0, 1.0, 0.0);
}

void displayFcn(void) {
	/*进行画图试验*/
	PinSL pp[4];
	pp[0].setPinSL(100, 0, 0, 0, 0);
	pp[1].setPinSL(190, 0, 0, 0, 0);
	pp[2].setPinSL(320, 0, 0, 0, 0);
	pp[3].setPinSL(450, 0, 0, 0, 0);


	PinSLV* p = new PinSLV[600];
	 

	glClear(GL_COLOR_BUFFER_BIT);
	glPointSize(7);
	glColor3f(0.0, 1.0, 1.0);
	for (GLint y = 10; y < 400; ++y) {
		p[y].setPinSLV(pp, 4, y);
		p[y].PlotScanLine();
	}
	glFlush();
}
void winReshapeFcn(GLint newWidth, GLint newHeight) {
	/*maintain an aspect ratio of 1.0*/
	glViewport(0, 0, newHeight, newHeight);

	glMatrixMode(GL_PROJECTION);

	gluOrtho2D(xwcMin, xwcMax, ywcMin, ywcMax);

	glClear(GL_COLOR_BUFFER_BIT);
}

void main(int argc, char **argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(winWidth, winHeight);
	glutCreateWindow("Scan Line Fill Up");

	init();
	glutDisplayFunc(displayFcn);
	glutReshapeFunc(winReshapeFcn);

	glutMainLoop();
}
