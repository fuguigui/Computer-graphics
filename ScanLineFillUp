#include <stdio.h>
#include <stdlib.h>
#include <GL/glut.h>

GLsizei winWidth = 600, winHeight = 600;

GLfloat xwcMin = 0.0, xwcMax = 500.0;
GLfloat ywcMin = 0.0, ywcMax = 500.0;
/*
想法
1.给定几个点：生成一个多边形
2.给定一个多边形，边框的最小范围，按照扫描线，建立一个边表
3.给出边表，计算出每一条扫描线上相交的点
3.1. 给定一条扫描线上的点，对两两之间的线段进行填充
*/
/*
1.申明“点”Point数据结构，根据点生成非水平的线段。
作为多边形：一组线段列表，线段按照ymin排序，声明数据结构：线段Line，多边形Poly
2.建立一个边表数组（大小为所有的扫描线条数：窗口界面的ymax-ymin+1）
声明：边表结构Edge，包括ymin对应的x值，ymax,delta x,delta y
建立一个相交点数组（大小同上），相交点结构：pinl指针+点的个数
每一元：存放与该扫描线相交的“点”：声明结构：pinl（point in line）:xvalue,countvalue,lefttimes,delta x,delta y
这里的点的结构：x值，计数器值，剩余次数；
对多边形中的每一条线段，根据ymin，把它添加到相应的扫描线上
3.计算每一条扫描线上的点：前一条扫描线上的点，检查剩余绘制次数，若没失效，计算x值。再计算当前新加入的线。
3.1. 对每一条扫描线上的点，按照x大小进行排序，建立线段数组，进行画线。
*/
struct Point{/*定义“点”*/
	int x, y;
};
struct Line{/*定义“直线”*/
	Point start, end;
};
class  Poly{
public:
	Line* pline;
	int lnum;/*表明这个多边形有n条边*/
	 Poly(Point *pp,int pnum) {/*用给定的点，生成相应的凸包，假定点已经是“良序”的*//*------“良序”需要定义-------*/
		 pline = new Line[pnum];//生成的边的数量等于点的数量;
		 lnum = pnum;
		 for (int i = 0; i < pnum; ++i) {
			 /*规定pline中的线段的起点y坐标一定不小于终点的y坐标*/
			 /*如果该线段的终点不是极值点的话，就把终点的y坐标-1*/
			 /*水平线需要额外考虑*/ /*--------先假设不存在水平线--------*/
			 int minus = 0;
			 if ((pp[(i + 1) % pnum].y - pp[i].y)*(pp[(i + 1) % pnum].y - pp[(i + 2) % pnum].y) < 0)minus = 1;
			 if (pp[i].y < pp[(i + 1)%pnum].y) {
				 pline[i].start.x = pp[i].x;
				 pline[i].start.y = pp[i].y;
				 pline[i].end.x = pp[(i + 1)%pnum].x;
				 pline[i].end.y = pp[(i + 1)%pnum].y-minus;
			 }
			 else {
				 pline[i].start.x = pp[(i + 1) % pnum].x;
				 pline[i].start.y = pp[(i + 1) % pnum].y;
				 pline[i].end.x = pp[i].x;
				 pline[i].end.y = pp[i].y-minus;
			 }
		 }
	 }

	 /*把pline中的线段按照起点的y由小到大排序*/
	 void order() {
		/*采用顺序排序， 因为线段数量不是很多*/
		 for (int i = 0; i < lnum; ++i) {
			 int min = pline[i].start.y;
			 int index = i;
			 for (int j = i+1; j < lnum; ++j) {
				 if (pline[j].start.y < min) {
					 min = pline[j].start.y;
					 index = j;
				 }
			 }
			 if (index != i) {
				 Line temp = pline[i];
				 pline[i] = pline[index];
				 pline[index] = temp;
			 }
		 }
	 }
	~ Poly() {
		delete pline;
	};
};
class Edge {
public:
	int x, ymax, DelatX, DeltaY;
	Edge* nextedge;

	/*在已有的边之后再加上一条边*/
	void add(Edge* temp) {
		Edge* tedge = this;
		/*如果这条边的nextedge为控指针，则加在这条后面，否则，检查nextedge对应的edge*/
		while (tedge->nextedge != nullptr) {
			tedge = tedge->nextedge;
		}
		tedge->nextedge = temp;
		temp->nextedge = nullptr;	
	}
};
class  EdgeV 
{
public:
	Edge* head;
	int num;
	void add(Edge* temp) {
		head->add(temp);
		num++;
	}
};//在主函数里声明EdgeV EV[lnum];
class  PinSL//point in the search line
{
public:
	int x;
	int count;//计数器，用来决定是否增加x
	int lefttimes;//该点的生存剩余扫描线条数。由这点所在的原线段的ymax值和当前的y值决定。如果lefttimes = 0，则下一条扫描线就抛弃这个点
	int deltaX, deltaY;

	void add_x(int add_y) {
		count += add_y*deltaX;
		while (count >= deltaY) {
			x++;
			count -= deltaY;
		}
	}
	
	void setPinSL(int xx,int cc, int lltimes, int dx, int dy) {
		x = xx;
		count = cc;
		lefttimes = lltimes;
		deltaX = dx;
		deltaY = dy;
	}
};
class  PinSLV//point in the search line vector
{
public:
	PinSL* p;
	int num;//初始值为0
	int y;//记录当前扫描线的y坐标，相对的还是绝对的，还需再讨论,必须要和edge中的y坐标统一起来
	PinSLV() {}
	PinSLV(PinSLV *beforeP, EdgeV *nowEdge,int yy)//给出前一条扫描线上的各个点，和当前扫描线的边表，计算当前扫描线上的表
	{
		y = yy;
		int n = beforeP->num+nowEdge->num;
		p = new PinSL[n];//这种定义存在很大的浪费
		Edge *tedge = nowEdge->head;
		int i = 0;
		/*把当前扫描线边表中的边的交点加入到这条扫描线的交点上*/
		while (tedge != nullptr) {
			p[i++].setPinSL(tedge->x, 0, tedge->ymax - y, tedge->DelatX, tedge->DeltaY);
			num++;
		}
		/*把前一条扫描线上的各个点加入到这条扫描线上*/
		for (int j = 0; j < beforeP->num; ++j) {
			if (beforeP->p[j].lefttimes > 0) {
				PinSL ptemp = beforeP->p[j];
				p[i++].setPinSL(ptemp.x, ptemp.count, ptemp.lefttimes - 1, ptemp.deltaX, ptemp.deltaY);
				num++;
			}
		}
	}
	~PinSLV()
	{
		delete p;
	}
};//在主函数里声明PinSLV PV[lnum];

void plotline(GLint startx, GLint starty, GLint endx, GLint endy) {
	glBegin(GL_LINES);
	glVertex2i(startx, starty);
	glVertex2i(endx, endy);
	glEnd();
}
void PlotScanLine(PinSLV pv) {
	int num = pv.num;
	int* x = new int[num];//把扫描线上的交点的横坐标取出来，并按由小到大排好
	for (int i = 0; i < num; ++i) {
		x[i] = pv.p[i].x;
	}
	/*排序*/
	for (int i = 0; i < num; ++i) {
		int mini = x[i];
		int index = i;
		for (int j = 1; j < num; ++j) {
			if (x[j] < mini) {
				mini = x[j];
				index = j;
			}
		}
		if (index != i) {
			x[index] = x[i];
			x[i] = mini;
		}
	}
	/*取一对对x，进行画线*/
	for (int i = 0; i < num - 1; ++i) {
		plotline(x[i], pv.y, x[i + 1], pv.y);//画线函数还需要再写
	}
}
void init(void) {
	/*Set color of display window to white */
	glClearColor(1.0, 1.0, 1.0, 0.0);
}

void displayFcn(void) {
	/*set example number of control points and number of curve
	*positions to be poltted along the Bezier curve.
	*/

	GLint xstart = 20, ystart = 50, xend = 300, yend = 500;


	glClear(GL_COLOR_BUFFER_BIT);
	glPointSize(6);
	glColor3f(0.0, 1.0, 1.0);
	plotline(xstart, ystart, xend, yend);
	glFlush();
}
void winReshapeFcn(GLint newWidth, GLint newHeight) {
	/*maintain an aspect ratio of 1.0*/
	glViewport(0, 0, newHeight, newHeight);

	glMatrixMode(GL_PROJECTION);

	gluOrtho2D(xwcMin, xwcMax, ywcMin, ywcMax);

	glClear(GL_COLOR_BUFFER_BIT);
}

void main(int argc, char **argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(winWidth, winHeight);
	glutCreateWindow("Scan Line Fill Up");

	init();
	glutDisplayFunc(displayFcn);
	glutReshapeFunc(winReshapeFcn);

	glutMainLoop();
}
